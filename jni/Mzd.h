/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class Mzd */

#ifndef _Included_Mzd
#define _Included_Mzd
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     Mzd
 * Method:    m4ri_init
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_Mzd_m4ri_1init
  (JNIEnv *, jclass);

/*
 * Class:     Mzd
 * Method:    mzd_init
 * Signature: (II)J
 */
JNIEXPORT jlong JNICALL Java_Mzd_mzd_1init
  (JNIEnv *, jobject, jint, jint);

/*
 * Class:     Mzd
 * Method:    mzd_copy
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_Mzd_mzd_1copy
  (JNIEnv *, jobject, jlong);

/*
 * Class:     Mzd
 * Method:    mzd_get_nrows
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_Mzd_mzd_1get_1nrows
  (JNIEnv *, jclass, jlong);

/*
 * Class:     Mzd
 * Method:    mzd_get_ncols
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_Mzd_mzd_1get_1ncols
  (JNIEnv *, jclass, jlong);

/*
 * Class:     Mzd
 * Method:    mzd_destroy
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_Mzd_mzd_1destroy
  (JNIEnv *, jobject, jlong);

/*
 * Class:     Mzd
 * Method:    mzd_write_bit
 * Signature: (JIII)V
 */
JNIEXPORT void JNICALL Java_Mzd_mzd_1write_1bit
  (JNIEnv *, jobject, jlong, jint, jint, jint);

/*
 * Class:     Mzd
 * Method:    mzd_read_bit
 * Signature: (JII)I
 */
JNIEXPORT jint JNICALL Java_Mzd_mzd_1read_1bit
  (JNIEnv *, jobject, jlong, jint, jint);

/*
 * Class:     Mzd
 * Method:    mzd_echelonize
 * Signature: (JZ)I
 */
JNIEXPORT jint JNICALL Java_Mzd_mzd_1echelonize
  (JNIEnv *, jobject, jlong, jboolean);

/*
 * Class:     Mzd
 * Method:    mzd_solve_left
 * Signature: (JJIZ)I
 */
JNIEXPORT jint JNICALL Java_Mzd_mzd_1solve_1left
  (JNIEnv *, jclass, jlong, jlong, jint, jboolean);

/*
 * Class:     Mzd
 * Method:    mzd_kernel_left_pluq
 * Signature: (JI)J
 */
JNIEXPORT jlong JNICALL Java_Mzd_mzd_1kernel_1left_1pluq
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     Mzd
 * Method:    mzd_randomize
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_Mzd_mzd_1randomize
  (JNIEnv *, jobject, jlong);

/*
 * Class:     Mzd
 * Method:    mzd_print
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_Mzd_mzd_1print
  (JNIEnv *, jobject, jlong);

/*
 * Class:     Mzd
 * Method:    mzd_info
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_Mzd_mzd_1info
  (JNIEnv *, jobject, jlong, jboolean);

/*
 * Class:     Mzd
 * Method:    mzd_concat
 * Signature: (JJ)J
 */
JNIEXPORT jlong JNICALL Java_Mzd_mzd_1concat
  (JNIEnv *, jclass, jlong, jlong);

/*
 * Class:     Mzd
 * Method:    mzd_stack
 * Signature: (JJ)J
 */
JNIEXPORT jlong JNICALL Java_Mzd_mzd_1stack
  (JNIEnv *, jclass, jlong, jlong);

/*
 * Class:     Mzd
 * Method:    mzd_is_zero
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_Mzd_mzd_1is_1zero
  (JNIEnv *, jobject, jlong);

/*
 * Class:     Mzd
 * Method:    mzd_mul_naive
 * Signature: (JJ)J
 */
JNIEXPORT jlong JNICALL Java_Mzd_mzd_1mul_1naive
  (JNIEnv *, jclass, jlong, jlong);

/*
 * Class:     Mzd
 * Method:    mzd_add
 * Signature: (JJ)J
 */
JNIEXPORT jlong JNICALL Java_Mzd_mzd_1add
  (JNIEnv *, jclass, jlong, jlong);

/*
 * Class:     Mzd
 * Method:    mzd_transpose
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_Mzd_mzd_1transpose
  (JNIEnv *, jclass, jlong);

/*
 * Class:     Mzd
 * Method:    mzd_equal
 * Signature: (JJ)I
 */
JNIEXPORT jint JNICALL Java_Mzd_mzd_1equal
  (JNIEnv *, jclass, jlong, jlong);

/*
 * Class:     Mzd
 * Method:    mzd_copy_row
 * Signature: (JIJI)V
 */
JNIEXPORT void JNICALL Java_Mzd_mzd_1copy_1row
  (JNIEnv *, jclass, jlong, jint, jlong, jint);

/*
 * Class:     Mzd
 * Method:    mzd_copy_rows
 * Signature: (JIJII)V
 */
JNIEXPORT void JNICALL Java_Mzd_mzd_1copy_1rows
  (JNIEnv *, jclass, jlong, jint, jlong, jint, jint);

/*
 * Class:     Mzd
 * Method:    m4ri_srandom
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_Mzd_m4ri_1srandom
  (JNIEnv *, jclass, jint);

/*
 * Class:     Mzd
 * Method:    m4ri_row_add
 * Signature: (JII)V
 */
JNIEXPORT void JNICALL Java_Mzd_m4ri_1row_1add
  (JNIEnv *, jobject, jlong, jint, jint);

/*
 * Class:     Mzd
 * Method:    m4ri_row_clear_offset
 * Signature: (JII)V
 */
JNIEXPORT void JNICALL Java_Mzd_m4ri_1row_1clear_1offset
  (JNIEnv *, jobject, jlong, jint, jint);

/*
 * Class:     Mzd
 * Method:    m4ri_submatrix
 * Signature: (JJIIII)J
 */
JNIEXPORT jlong JNICALL Java_Mzd_m4ri_1submatrix
  (JNIEnv *, jobject, jlong, jlong, jint, jint, jint, jint);

#ifdef __cplusplus
}
#endif
#endif
